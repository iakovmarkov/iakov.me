{"pageProps":{"raw":"---\r\ntitle: Funcitonal Programming in React\r\ndate: 2017-05-01\r\ntags:\r\n- Programming\r\n- Functional programming\r\n- React\r\n- JavaScript\r\n---\r\nIn this blog I will briefly describe the basics of functional programming, and how you might already use it without knowing.\r\n---\r\n\r\n## Intro\r\n\r\nYou have probably heard about Functional Programming as a concept, and that it applies well to React applications. Indeed, recent development in React seems to push people towards using functional components more. I have learned about the concept from my colleague, and it took me a bit to wrap my head around it. \r\n\r\nThe main idea of functional programming is that functions should be first-class citizens. It means that you can work with them just like you work with other data types. You can pass them as object, you can assign them to variables, you can return them from other functions.\r\n\r\nSounds familiar? Of course it does. If you've programmed in JavaScript, you've probably done it a thousand times already. Let's take a look at a few applications of functional programming in JavaScript.\r\n\r\n## Examples of FP in JS\r\n\r\nA lot of common JavaScript patterns make use of functional programming. Let's take a look.\r\n\r\n### `map` and `reduce`\r\n\r\nTake, for example, following code:\r\n\r\n```javascript\r\nconst array = [1, 2, 3, 4, 5]\r\n\r\nconst double = array.map(value => value * 2)\r\nconsole.log(double) // [2, 4, 6, 8, 10]\r\n\r\nconst sum = array.reduce((value, acc) => acc += val, 0)\r\nconsole.log(sum) // 15\r\n```\r\n\r\nBoth of those array methods take a function as an argument. You pass a function as an argument, and it gets called for each element of `array`. That's a good example of function being treated the same as any other data type that you can pass around.\r\n\r\n### A jQuery example\r\n\r\nI suppose everybody knows this snippet:\r\n\r\n```javascript\r\n$('document').ready(function() {\r\n  console.log('ready');\r\n  $('body').css('opacity', 1);\r\n})\r\n```\r\n\r\nThe callback function you pass to jQuery is another demonstration of that.\r\n\r\n## Examples of FP in React\r\n\r\nReact is built with functional programming as a preferred paradigm. React core team reference it a lot throughout [documentation](https://reactjs.org/docs/composition-vs-inheritance.html) and their [personal blogs](https://twitter.com/dan_abramov/status/752643494972383232). Let's take a look.\r\n\r\n### Event handlers\r\n\r\nEvery time you need to handle events on DOM elements, you pass a handler function:\r\n\r\n```jsx\r\nconst Button = (props) => (\r\n  <button \r\n    type=\"button\"\r\n    onClick={(event) => { \r\n      if (typeof props.onClick === 'function') { \r\n        props.onClick(event) } \r\n      }\r\n    }\r\n  >\r\n    {props.children}\r\n  </button>\r\n)\r\n```\r\n\r\nA `onClick` function can be passed to this component as a prop. The constant `Button` is being assigned a function as a value.\r\n\r\n### Local component state\r\n\r\nYou can pass a callback function to `setState` on a React component. This function will receive a current state value as it's argument:\r\n\r\n```jsx\r\n\r\nclass ClickCounter extends React.Component {\r\n  state = {\r\n    value: 0\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState(\r\n      ({ value }) => ({ value: value += 1 })\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div>You clicked {this.state.value} times.</div>\r\n        <button type=\"button\" onClick={this.handleClick}>Click me</button>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n```\r\n\r\n### React-Redux\r\n\r\nIf you have used Redux, you're probably familiar with `connect` function from it's sister library React-Redux. It is used to get global Redux state into a component:\r\n\r\n```jsx\r\n@connect((state) => ({ name: state.name }))\r\nclass Greeter extends React.Components {\r\n  render () {\r\n    return <h1>Hello, {this.props.name}</h1>\r\n  }\r\n}\r\n```\r\n\r\nThe `connect` decorator takes two parameters - both of them are functions that add new props to the enhanced components. Moreover, the `connect` decorator itself is a function - feel free to take a look at [source code on GitHub](https://github.com/reduxjs/react-redux/blob/master/src/connect/connect.js) to see how it works!\r\n\r\n## Conclussion\r\n\r\nI think by now you get the idea. I believe that treating functions as first-class citizens in language is the main idea of functional programming. Many JavaScript developers have applied it without really knowing that they're using a functional programming technique.\r\n\r\nThis is not the only aspect of functional programming though. There are many other good ideas like composition, immutability, pure functions and the like. Even though JavaScript is a multi-paradigm language, and it doesn't force you into doing things in a strictly FP way, it's very useful to know more about the FP techniques you can use in JS and React. You can read about one of them in [Higher-Order Components in React](/blog/react_hocs).\r\n\r\n## Useful links\r\n\r\n- [SOLID: The next step is functional](https://blog.ploeh.dk/2014/03/10/solid-the-next-step-is-functional/) - an article about the virtues of functional programming."},"__N_SSG":true}